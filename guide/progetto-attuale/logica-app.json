{
  "projectName": "Fantavega - Fantacalcio Auction System",
  "projectGoal": "Sviluppare una piattaforma d'asta per il fantacalcio con gestione di leghe/stagioni, aste per singoli giocatori con timer e reset, offerte manuali/quick, gestione budget per manager, e funzionalità di riparazione.",
  "currentDevelopmentPhase": "Completato Task 7 (Real-Time Notification System). L'applicazione ora supporta aggiornamenti live per le aste e notifiche personali via WebSocket, inclusa la notifica per le penalità applicate.",
  "technologyStack": {
    "frontend": "Next.js 15.2.3 (App Router), React, TypeScript, Tailwind CSS",
    "backend": "Next.js API Routes (TypeScript)",
    "database": "BetterSQLite3 (accesso diretto)",
    "authentication": "Clerk",
    "realTime": "Socket.IO",
    "packageManager": "pnpm",
    "developmentEnvironment": "Docker & Docker Compose (Node 20 Slim/Debian base)",
    "uiComponents": "shadcn/ui (base per theming), lucide-react (icone), sonner (notifiche)",
    "theming": "next-themes",
    "excelParsing": "xlsx (SheetJS)"
  },
  "databaseManagement": {
    "schemaDefinition": "SQL DDL in `database/schema.sql`",
    "dbConnection": "`src/lib/db/index.ts` (singleton pattern, crea DB file se non esiste)",
    "scripts": [
      {
        "name": "db:migrate",
        "purpose": "Applica l'intero `database/schema.sql`."
      },
      {
        "name": "db:reset",
        "purpose": "Effettua un backup, cancella il file del database e richiede una migrazione successiva per ricrearlo."
      },
      {
        "name": "db:apply-changes",
        "purpose": "Esegue query SQL ad-hoc da `database/adhoc_changes.sql` (con backup)."
      },
      { "name": "db:backup", "purpose": "Crea backup manuale." },
      { "name": "db:seed", "purpose": "Popola DB con dati di esempio." }
    ]
  },
  "coreEntitiesSchema": [
    {
      "tableName": "users",
      "description": "Estende utenti Clerk con `role` ('admin', 'manager') e `status`."
    },
    { "tableName": "players", "description": "Catalogo giocatori." },
    {
      "tableName": "auction_leagues",
      "description": "Configurazione della lega d'asta."
    },
    {
      "tableName": "league_participants",
      "description": "Associazione utenti a leghe. Traccia `current_budget`, `locked_credits`, etc."
    },
    {
      "tableName": "auctions",
      "description": "Asta per un singolo giocatore."
    },
    { "tableName": "bids", "description": "Log di ogni offerta." },
    {
      "tableName": "player_assignments",
      "description": "Traccia l'assegnazione finale di un giocatore a un manager."
    },
    {
      "tableName": "budget_transactions",
      "description": "Log delle modifiche al `current_budget`."
    },
    {
      "tableName": "user_league_compliance_status",
      "description": "Traccia lo stato di conformità dell'utente ai requisiti di rosa per lega/fase."
    },
    {
      "tableName": "auto_bids",
      "description": "Tabella per la gestione delle offerte automatiche (funzionalità futura)."
    },
    {
      "tableName": "player_discard_requests",
      "description": "Tabella per la gestione delle richieste di svincolo giocatori (funzionalità futura)."
    },
    {
      "tableName": "user_auction_cooldowns",
      "description": "Tabella per gestire i cooldown degli utenti dopo l'abbandono di un'asta (funzionalità futura)."
    },
    {
      "tableName": "user_auction_response_timers",
      "description": "Tabella per i timer di risposta degli utenti alle aste (funzionalità futura)."
    }
  ],
  "realTimeNotificationSystem": {
    "feature_name": "Sistema di Notifiche e Aggiornamenti in Tempo Reale",
    "summary": "Implementa un sistema basato su WebSocket (Socket.IO) per fornire aggiornamenti della UI in tempo reale e notifiche personali.",
    "architectural_pattern": "Pattern a 'Server Dedicato Stateful'. Un server Socket.IO (`socket-server.ts`) gira come processo separato. Il backend Next.js comunica con esso tramite un 'ponte HTTP' per istruirlo su quali eventi emettere.",
    "user_flow": [
      "1. Al login, il `SocketProvider` stabilisce una connessione WebSocket per l'utente.",
      "2. Il client si unisce a una 'stanza' personale (es. 'user-user_123') e, in un'asta, alla 'stanza' della lega (es. 'league-456').",
      "3. Quando un'azione di business avviene (es. offerta, penalità), il servizio corrispondente (`bid.service.ts`, `penalty.service.ts`) chiama `notifySocketServer` dopo aver aggiornato il DB.",
      "4. `notifySocketServer` invia una richiesta POST al server Socket.IO.",
      "5. Il server Socket.IO emette gli eventi (`auction-update`, `bid-surpassed-notification`, `penalty-applied-notification`) alle stanze appropriate.",
      "6. I client connessi ricevono gli eventi, aggiornando la UI e mostrando notifiche toast."
    ],
    "core_components_interaction": {
      "socket-server.ts": "Server Node.js autonomo con Socket.IO.",
      "src/lib/socket-emitter.ts": "Funzione helper usata dal backend Next.js per comunicare con `socket-server.ts`.",
      "src/lib/db/services/bid.service.ts": "Chiama `notifySocketServer` dopo le operazioni di offerta/chiusura asta.",
      "src/lib/db/services/penalty.service.ts": "Chiama `notifySocketServer` dopo l'applicazione di una penalità.",
      "src/contexts/SocketContext.tsx": "React Context che gestisce il ciclo di vita della connessione socket del client.",
      "src/app/layout.tsx": "Avvolge l'app nel `SocketProvider` per rendere il socket globalmente accessibile.",
      "src/components/auction/AuctionRealtimeDisplay.tsx": "Componente client che usa `useSocket` per ascoltare eventi e aggiornare la UI."
    }
  },
  "auctionLogic": {
    "penaltySystem": {
      "trigger": "Al login/accesso sezioni chiave asta (approccio 'lazy').",
      "requirement": "Entro 1 ora dal trigger, N-1 slot coperti per ruoli attivi.",
      "penaltyApplication": "5 crediti se non conforme dopo 1 ora, con notifica real-time all'utente.",
      "penaltyRecurrence": "Ricorrente ogni ora successiva di non conformità.",
      "penaltyCap": "Max 5 penalità (25 crediti) per ciclo di non conformità.",
      "cycleReset": "Se conforme, contatore penalità azzerato.",
      "trackingTable": "`user_league_compliance_status`."
    }
  },
  "managerFunctionalitiesImplemented_Backend": [
    "Offerte (iniziali, successive) con gestione `locked_credits`.",
    "Visualizzazione stato asta giocatore.",
    "Visualizzazione propria cronologia transazioni budget.",
    "Visualizzazione propria rosa.",
    "Trigger (implicito) del controllo di compliance per penalità.",
    "Ricezione aggiornamenti asta e notifiche (offerte superate, penalità) in tempo reale."
  ]
}
