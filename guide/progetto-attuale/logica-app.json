{
  "projectName": "Fantavega - Fantacalcio Auction System",
  "last_task_completed": {
    "last_update": "2024-12-19T16:45:00Z",
    "task_completed": "9.3 - Create player management interface",
    "feature_logic": {
      "feature_name": "Interfaccia Ricerca Giocatori (User)",
      "summary": "Implementa un'interfaccia completa per la ricerca e gestione giocatori che permette agli utenti di cercare, filtrare e visualizzare giocatori con stato asta, piazzare offerte dirette, e agli admin di avviare nuove aste con design responsive.",
      "architectural_pattern": "Pagina Server Component per autenticazione e data fetching iniziale, componenti Client modulari per interattività real-time, integrazione Socket.IO per aggiornamenti live, pattern di composizione per layout responsive.",
      "user_flow": [
        "1. L'utente (manager/admin) naviga alla pagina `/players`.",
        "2. Il sistema verifica l'autenticazione e il ruolo utente.",
        "3. Vengono caricate le leghe dell'utente e tutti i giocatori con stato asta.",
        "4. L'utente può cercare per nome/squadra e filtrare per ruolo, stato asta, tempo rimanente.",
        "5. L'interfaccia mostra cards giocatori con stats, stato asta e azioni disponibili.",
        "6. L'utente può piazzare offerte dirette tramite modal di bidding rapido.",
        "7. Gli admin possono avviare nuove aste per giocatori disponibili.",
        "8. Gli aggiornamenti real-time aggiornano stato aste e countdown timer."
      ],
      "core_components_interaction": {
        "src/app/players/page.tsx": "Pagina Server Component che gestisce autenticazione e carica l'interfaccia ricerca giocatori.",
        "src/app/players/PlayerSearchInterface.tsx": "Componente Client principale che orchestra ricerca, filtri e gestisce stato real-time.",
        "src/components/players/PlayerSearchBar.tsx": "Barra di ricerca per nome giocatore e squadra con icona.",
        "src/components/players/PlayerAdvancedFilters.tsx": "Filtri avanzati per ruolo, stato asta, tempo rimanente, squadra con contatori attivi.",
        "src/components/players/PlayerSearchResults.tsx": "Griglia responsive di risultati con gestione stati vuoti.",
        "src/components/players/PlayerSearchCard.tsx": "Card giocatore con stats, stato asta, timer e azioni (bid/start auction).",
        "src/components/players/QuickBidModal.tsx": "Modal per offerte rapide con validazione budget e offerte quick (+1,+5,+10).",
        "src/app/api/user/leagues/route.ts": "API per recuperare leghe utente con budget e team info.",
        "src/app/api/leagues/[league-id]/players-with-status/route.ts": "API per giocatori con stato asta, assignment e timer real-time."
      },
      "database_interactions": [
        {
          "table": "auctions",
          "operation": "SELECT",
          "description": "Recupera dettagli asta attiva per la lega."
        },
        {
          "table": "bids",
          "operation": "INSERT",
          "description": "Inserisce nuove offerte degli utenti."
        },
        {
          "table": "league_participants",
          "operation": "UPDATE",
          "description": "Aggiorna budget e crediti bloccati dopo le offerte."
        },
        {
          "table": "budget_transactions",
          "operation": "INSERT",
          "description": "Registra transazioni budget per audit trail."
        }
      ]
    }
  },
  "projectGoal": "Sviluppare una piattaforma d'asta per il fantacalcio con gestione di leghe/stagioni, aste per singoli giocatori con timer e reset, offerte manuali/quick, gestione budget per manager, e funzionalità di riparazione.",
  "currentDevelopmentPhase": "Task 9 (Sviluppo UI) quasi completato. Completati subtask 9.1 (Layout/Navigation), 9.2 (Auction Interface) e 9.3 (Player Management Interface). Interfacce aste live e ricerca giocatori funzionali con design responsive, filtri avanzati e aggiornamenti real-time. Prossimo: 9.4 (Enhanced Notifications).",
  "technologyStack": {
    "frontend": "Next.js 15.2.3 (App Router), React, TypeScript, Tailwind CSS",
    "backend": "Next.js API Routes & Server Actions (TypeScript)",
    "database": "BetterSQLite3 (accesso diretto)",
    "authentication": "Clerk",
    "realTime": "Socket.IO",
    "validation": "Zod",
    "packageManager": "pnpm",
    "developmentEnvironment": "Docker & Docker Compose (Node 20 Slim/Debian base)",
    "uiComponents": "shadcn/ui (base per theming), lucide-react (icone), sonner (notifiche)",
    "theming": "next-themes",
    "excelParsing": "xlsx (SheetJS)"
  },
  "databaseManagement": {
    "schemaDefinition": "SQL DDL in `database/schema.sql`",
    "dbConnection": "`src/lib/db/index.ts` (singleton pattern, crea DB file se non esiste)",
    "scripts": [
      { "name": "db:migrate", "purpose": "Applica l'intero `database/schema.sql`." },
      { "name": "db:reset", "purpose": "Effettua un backup, cancella il file del database e richiede una migrazione successiva per ricrearlo." },
      { "name": "db:apply-changes", "purpose": "Esegue query SQL ad-hoc da `database/adhoc_changes.sql` (con backup)." },
      { "name": "db:backup", "purpose": "Crea backup manuale." },
      { "name": "db:seed", "purpose": "Popola DB con dati di esempio." }
    ]
  },
  "coreEntitiesSchema": [
    { "tableName": "users", "description": "Estende utenti Clerk con `role` ('admin', 'manager') e `status`." },
    { "tableName": "players", "description": "Catalogo giocatori." },
    { "tableName": "auction_leagues", "description": "Configurazione della lega d'asta." },
    { "tableName": "league_participants", "description": "Associazione utenti a leghe. Traccia `current_budget`, `locked_credits`, etc." },
    { "tableName": "auctions", "description": "Asta per un singolo giocatore." },
    { "tableName": "bids", "description": "Log di ogni offerta." },
    { "tableName": "player_assignments", "description": "Traccia l'assegnazione finale di un giocatore a un manager." },
    { "tableName": "budget_transactions", "description": "Log delle modifiche al `current_budget`." },
    { "tableName": "user_league_compliance_status", "description": "Traccia lo stato di conformità dell'utente ai requisiti di rosa per lega/fase." }
  ],
  "leagueAndParticipantManagement": {
    "feature_name": "Gestione Leghe e Partecipanti (Admin)",
    "summary": "Fornisce all'admin una suite di strumenti per creare leghe, visualizzarle in una lista e gestire i partecipanti (aggiunta, modifica nome squadra, rimozione) e lo stato operativo di ogni lega dalla sua dashboard dedicata.",
    "architectural_pattern": "Pagine Server Components per il data fetching diretto e la visualizzazione. Le operazioni di modifica (mutations) sono gestite da componenti Client dedicati (forms, dialogs) che invocano Server Actions per interagire con il backend in modo sicuro.",
    "user_flow": [
      "1. **Creazione:** L'admin usa il form in `/admin/leagues/create` per creare una nuova lega.",
      "2. **Visualizzazione:** L'admin vede tutte le leghe create nella pagina `/admin/leagues`.",
      "3. **Gestione:** Cliccando su una lega, accede alla sua dashboard (`/admin/leagues/[id]/dashboard`).",
      "4. **Aggiunta Partecipante:** Dalla dashboard, l'admin può aggiungere nuovi manager.",
      "5. **Modifica Nome Squadra:** L'admin può modificare il nome di una squadra in qualsiasi momento tramite un popover.",
      "6. **Rimozione Partecipante:** L'admin può rimuovere un partecipante tramite un dialogo di conferma, ma solo se la lega è in stato 'participants_joining'.",
      "7. **Cambio Stato:** L'admin può cambiare la fase operativa della lega (es. da 'Iscrizioni Aperte' a 'Asta Attiva')."
    ]
  },
  "realTimeNotificationSystem": {
    "feature_name": "Sistema di Notifiche e Aggiornamenti in Tempo Reale",
    "summary": "Implementa un sistema basato su WebSocket (Socket.IO) per fornire aggiornamenti della UI in tempo reale e notifiche personali.",
    "architectural_pattern": "Pattern a 'Server Dedicato Stateful'. Un server Socket.IO (`socket-server.ts`) gira come processo separato. Il backend Next.js comunica con esso tramite un 'ponte HTTP'."
  },
  "auctionLogic": {
    "penaltySystem": {
      "trigger": "Al login/accesso sezioni chiave asta (approccio 'lazy').",
      "requirement": "Entro 1 ora dal trigger, N-1 slot coperti per ruoli attivi.",
      "penaltyApplication": "5 crediti se non conforme dopo 1 ora, con notifica real-time all'utente."
    }
  },
  "adminFunctionalitiesImplemented": [
    "Gestione Utenti (visualizzazione e cambio ruolo).",
    "Creazione di nuove leghe.",
    "Visualizzazione lista leghe.",
    "Dashboard di gestione lega con controlli per: aggiungere/rimuovere partecipanti, modificare nomi squadra e cambiare lo stato della lega."
  ],
  "managerFunctionalitiesImplemented_Backend": [
    "Offerte (iniziali, successive) con gestione `locked_credits`.",
    "Visualizzazione stato asta giocatore.",
    "Visualizzazione propria cronologia transazioni budget.",
    "Visualizzazione propria rosa.",
    "Trigger (implicito) del controllo di compliance per penalità.",
    "Ricezione aggiornamenti asta e notifiche (offerte superate, penalità) in tempo reale."
  ],
  "managerFunctionalitiesImplemented_Frontend": [
    "Interfaccia aste live responsive con visualizzazione giocatore e timer real-time.",
    "Sistema di offerte con validazione budget e offerte rapide (+1, +5, +10).",
    "Monitoraggio budget in tempo reale con progress bar e avvisi.",
    "Cronologia offerte con evidenziazione utente corrente.",
    "Notifiche toast per offerte superate e aste concluse.",
    "Layout responsive (desktop: 2 colonne, mobile: singola colonna).",
    "Integrazione Socket.IO per aggiornamenti live dell'interfaccia.",
    "Interfaccia ricerca giocatori con filtri avanzati (ruolo, stato asta, tempo rimanente, squadra).",
    "Ricerca testuale per nome giocatore e squadra con risultati real-time.",
    "Cards giocatori con stats complete (Qt.A, Qt.I, FVM, Diff) e stato asta.",
    "Modal offerte rapide direttamente dalla ricerca con validazione budget.",
    "Countdown timer per aste in scadenza con aggiornamenti real-time.",
    "Funzionalità admin per avviare nuove aste direttamente dall'interfaccia giocatori."
  ]
}
