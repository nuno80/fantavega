{
  "projectName": "Fantavega - Fantacalcio Auction System",
  "last_task_completed": {
    "last_update": "2025-01-20T09:30:00Z",
    "task_completed": "Bug Fix - Auto-Bid Calculation Logic Complete Rewrite",
    "feature_logic": {
      "feature_name": "Fix Auto-Bid Calculation Logic - eBay-Style Implementation",
      "summary": "Implementa un timer di risposta asincrono e specifico per utente. Quando un utente viene superato, un timer personale si attiva, dandogli un tempo limitato per rispondere. La mancata risposta comporta una penalità di cooldown, impedendo offerte future sullo stesso giocatore per un periodo di tempo.",
      "architectural_pattern": "Pattern 'Serie di Rilanci Manuali Automatici': implementa la logica eBay dove ogni auto-bid e trattato come una sequenza di rilanci manuali automatici. Questo semplifica enormemente la logica e garantisce risultati corretti in tutti gli scenari.",
      "user_flow": [
        "1. UserB supera l'offerta di UserA per un giocatore.",
        "2. Il server chiama `createResponseTimer` per UserA, creando un record 'pending' in `user_auction_response_timers` senza una scadenza immediata.",
        "3. UserA effettua il login o accede a una pagina che recupera i suoi stati d'asta. L'endpoint `/api/user/auction-states/route.ts` invoca `activateTimersForUser`.",
        "4. `activateTimersForUser` calcola la scadenza (es. 1 ora dal login) per i timer pendenti di UserA, aggiorna il DB e invia una notifica Socket.IO (`response-timer-started`).",
        "5. L'UI di UserA visualizza il countdown basato sulla scadenza appena attivata.",
        "6. CASO A: UserA rilancia prima della scadenza. `markTimerCompleted` imposta lo stato del timer su 'action_taken'. Nessuna penalità.",
        "7. CASO B: UserA non agisce. Un processo di background (`processExpiredResponseTimers`) rileva il timer scaduto.",
        "8. Il timer di UserA viene impostato su 'deadline_missed', i suoi crediti vengono sbloccati e viene aggiunto un record di penalità in `user_auction_cooldowns`.",
        "9. UserA riceve una notifica di abbandono e non può più offrire per quel giocatore per un periodo di tempo (es. 48 ore)."
      ],
      "core_components_interaction": {
        "src/lib/db/services/response-timer.service.ts": "Servizio dedicato che gestisce l'intero ciclo di vita dei timer di risposta asincroni.",
        "src/lib/db/services/bid.service.ts": "Orchestra la logica delle offerte, invocando `createResponseTimer` e `markTimerCompleted` nei momenti appropriati.",
        "createResponseTimer()": "Crea o aggiorna un timer di risposta per un utente superato.",
        "markTimerCompleted()": "Annulla un timer pendente quando l'utente effettua un controrilancio.",
        "processExpiredResponseTimers()": "Processo in background che gestisce i timer scaduti, sblocca i crediti e applica le penalità di cooldown.",
        "canUserBidOnPlayer()": "Verifica se un utente è in cooldown per un giocatore specifico prima di consentire un'offerta."
      },
      "database_interactions": [
        {
          "table": "auctions",
          "operation": "SELECT + UPDATE",
          "description": "Operazioni di offerta che possono generare errori gestiti dal nuovo error handler."
        },
        {
          "table": "league_participants",
          "operation": "SELECT + UPDATE", 
          "description": "Controlli budget e locked_credits che possono fallire e richiedere error handling."
        }
      ],
      "real_time_features": [
        {
          "event": "response-timer-started",
          "trigger": "L'utente superato effettua il login o accede a una pagina che attiva i suoi timer pendenti.",
          "data": "{ auctionId, deadline, timeRemaining }",
          "ui_response": "Informa il client dell'utente superato che un timer di risposta è stato attivato, fornendo la scadenza per avviare il countdown."
        },
        {
          "event": "auction-auto-abandoned",
          "trigger": "Scadenza di un timer di risposta",
          "data": "{ playerName, cooldownHours, reason }",
          "ui_response": "Notifica all'utente che ha abbandonato automaticamente l'asta e che è stato messo in cooldown."
        },
        {
          "event": "user-abandoned-auction",
          "trigger": "Scadenza di un timer di risposta",
          "data": "{ userId, playerId, playerName, reason }",
          "ui_response": "Informa l'intera lega che un utente ha abbandonato un'asta per timeout."
        }
      ]
    },
    "bug_details": {
      "original_issue": "Auto-bid system calcolava prezzi finali errati in scenari auto-bid vs auto-bid. Esempio: offerta manuale 33 crediti risultava in prezzo finale 31 invece di 34.",
      "root_cause": "Logica auto-bid usava importi auto-bid invece di offerte manuali per calcoli. Sistema non implementava correttamente la logica eBay di 'rilanci automatici sequenziali'.",
      "error_manifestation": [
        "Prezzi finali asta incorretti (troppo bassi)",
        "Utenti vincevano aste pagando meno del dovuto",
        "Violazione principi eBay-style auction",
        "Gestione crediti bloccati inconsistente"
      ],
      "technical_cause": "Algoritmo auto-bid confrontava max_amount degli auto-bid invece di simulare rilanci sequenziali partendo dall'offerta manuale."
    },
    "solution_implemented": [
      "Riscritta completamente logica auto-bid con approccio 'serie di rilanci manuali automatici'",
      "Implementato confronto diretto tra auto-bid massimi per determinare vincitore",
      "Calcolo prezzo finale: vincitore paga max_amount del perdente + 1 (o suo massimo in caso di parita)",
      "Gestione corretta caso parita: primo offerente vince al suo importo massimo",
      "Correzione gestione crediti bloccati con importi effettivi corretti",
      "Aggiornamento logging per tracciare nuova logica di calcolo"
    ],
    "files_modified": [
      "src/lib/db/services/bid.service.ts: Riscritta logica auto-bid (linee 577-645) con implementazione eBay-style",
      "bugfix.md: Documentazione completa del bug e della soluzione implementata"
    ]
  }
}
