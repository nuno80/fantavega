{
  "projectName": "Fantavega - Fantacalcio Auction System",
  "last_task_completed": {
    "last_update": "2025-01-15T12:00:00Z",
    "task_completed": "Bug Fix - Pulsante Abbandona Asta",
    "feature_logic": {
      "feature_name": "Sistema Response Timer e Correzioni ComplianceChecker",
      "summary": "Implementa response timer visivo per rilanci con logica 1-ora, correzione timer penalità ComplianceChecker, e miglioramenti notifiche real-time.",
      "architectural_pattern": "Response timer server-side con reset intelligente, ComplianceChecker con gestione stati scaduti, Socket.IO per notifiche real-time, pattern di validazione temporale per timer sovrapposti.",
      "user_flow": [
        "1. Quando l'utente viene superato in un'asta, appare slot rossa 'response_needed' con timer visivo.",
        "2. Al primo accesso alla pagina asta, response timer parte da 59:59 minuti.",
        "3. Timer si aggiorna ogni secondo con colori: verde (>30min), giallo (5-30min), rosso (<5min).",
        "4. Timer si resetta a 1 ora solo quando qualcun altro rilancia, non ad ogni ricarica pagina.",
        "5. Dopo 1 ora, se nessuna azione, asta viene abbandonata automaticamente dal server.",
        "6. ComplianceChecker mostra correttamente 'Penalità attive' quando grace period scade.",
        "7. Pulsanti rilancio/abbandono si disabilitano quando response timer scade.",
        "8. Sistema usa campo last_reset_at per evitare reset inappropriati del timer."
      ],
      "core_components_interaction": {
        "src/app/players/page.tsx": "Pagina Server Component che gestisce autenticazione e carica l'interfaccia ricerca giocatori.",
        "src/app/players/PlayerSearchInterface.tsx": "Componente Client principale che orchestra ricerca, filtri e gestisce stato real-time.",
        "src/components/players/PlayerSearchBar.tsx": "Barra di ricerca per nome giocatore e squadra con icona.",
        "src/components/players/PlayerAdvancedFilters.tsx": "Filtri avanzati per ruolo, stato asta, tempo rimanente, squadra con contatori attivi.",
        "src/components/players/PlayerSearchResults.tsx": "Griglia responsive di risultati con gestione stati vuoti.",
        "src/components/players/PlayerSearchCard.tsx": "Card giocatore con stats, stato asta, timer e azioni (bid/start auction).",
        "src/components/players/QuickBidModal.tsx": "Modal per offerte rapide con validazione budget e offerte quick (+1,+5,+10).",
        "src/app/api/user/leagues/route.ts": "API per recuperare leghe utente con budget e team info.",
        "src/app/api/leagues/[league-id]/players-with-status/route.ts": "API per giocatori con stato asta, assignment e timer real-time."
      },
      "database_interactions": [
        {
          "table": "auctions",
          "operation": "SELECT",
          "description": "Recupera dettagli asta attiva per la lega."
        },
        {
          "table": "bids",
          "operation": "INSERT",
          "description": "Inserisce nuove offerte degli utenti."
        },
        {
          "table": "league_participants",
          "operation": "UPDATE",
          "description": "Aggiorna budget e crediti bloccati dopo le offerte."
        },
        {
          "table": "budget_transactions",
          "operation": "INSERT",
          "description": "Registra transazioni budget per audit trail."
        }
      ]
    }
  },
  "bugFixAbandonButton": {
    "feature_name": "Correzione Bug Pulsante Abbandona Asta",
    "summary": "Risolve il problema del pulsante 'abbandona asta' che non funzionava a causa di un vincolo UNIQUE nel database che impediva abbandoni multipli della stessa asta.",
    "problem_identified": "La tabella user_auction_cooldowns ha vincolo UNIQUE(auction_id, user_id) che causava errore SQL quando un utente tentava di abbandonare la stessa asta più volte.",
    "solution_implemented": "Sostituito INSERT con INSERT OR REPLACE in tutti i punti del codice che inseriscono record in user_auction_cooldowns.",
    "files_modified": [
      "src/app/api/leagues/[league-id]/players/[player-id]/response-action/route.ts",
      "src/lib/db/services/response-timer.service.ts", 
      "src/lib/db/services/auction-states.service.ts"
    ],
    "user_flow_corrected": [
      "1. Utente1 fa offerta per 'Retegui' a 10 crediti → stato: miglior_offerta (verde).",
      "2. Utente2 rilancia 'Retegui' a 15 crediti → Utente1 stato: rilancio_possibile (rosso).",
      "3. Utente1 accede alla pagina auction → timer 1 ora parte per decidere rilancio/abbandono.",
      "4. Utente1 clicca 'Abbandona' → cooldown 48h per Retegui + slot liberata immediatamente.",
      "5. Sistema registra abbandono in user_auction_cooldowns senza errori di vincolo UNIQUE.",
      "6. Timer response marcato come 'action_taken' e stato cambiato a 'asta_abbandonata'.",
      "7. Notifiche real-time inviate a utente e lega per informare dell'abbandono.",
      "8. Slot liberata permette a Utente1 di riempirla con altri giocatori."
    ],
    "testing_performed": "Verificato che INSERT OR REPLACE funzioni correttamente con test SQL su database reale."
  },
  "projectGoal": "Sviluppare una piattaforma d'asta per il fantacalcio con gestione di leghe/stagioni, aste per singoli giocatori con timer e reset, offerte manuali/quick, gestione budget per manager, e funzionalità di riparazione.",
  "currentDevelopmentPhase": "Task 9 (Sviluppo UI) COMPLETATO. Tutti i subtask completati: 9.1 (Layout/Navigation), 9.2 (Auction Interface), 9.3 (Player Management Interface), 9.4 (Enhanced Notifications). Sistema auto-bid funzionale, aste scadute processate automaticamente, Socket.IO ottimizzato, database pulito. Pronto per testing finale e deployment.",
  "technologyStack": {
    "frontend": "Next.js 15.2.3 (App Router), React, TypeScript, Tailwind CSS",
    "backend": "Next.js API Routes & Server Actions (TypeScript)",
    "database": "BetterSQLite3 (accesso diretto)",
    "authentication": "Clerk",
    "realTime": "Socket.IO",
    "validation": "Zod",
    "packageManager": "pnpm",
    "developmentEnvironment": "Docker & Docker Compose (Node 20 Slim/Debian base)",
    "uiComponents": "shadcn/ui (base per theming), lucide-react (icone), sonner (notifiche)",
    "theming": "next-themes",
    "excelParsing": "xlsx (SheetJS)"
  },
  "databaseManagement": {
    "schemaDefinition": "SQL DDL in `database/schema.sql`",
    "dbConnection": "`src/lib/db/index.ts` (singleton pattern, crea DB file se non esiste)",
    "scripts": [
      { "name": "db:migrate", "purpose": "Applica l'intero `database/schema.sql`." },
      { "name": "db:reset", "purpose": "Effettua un backup, cancella il file del database e richiede una migrazione successiva per ricrearlo." },
      { "name": "db:apply-changes", "purpose": "Esegue query SQL ad-hoc da `database/adhoc_changes.sql` (con backup)." },
      { "name": "db:backup", "purpose": "Crea backup manuale." },
      { "name": "db:seed", "purpose": "Popola DB con dati di esempio." }
    ]
  },
  "coreEntitiesSchema": [
    { "tableName": "users", "description": "Estende utenti Clerk con `role` ('admin', 'manager') e `status`." },
    { "tableName": "players", "description": "Catalogo giocatori." },
    { "tableName": "auction_leagues", "description": "Configurazione della lega d'asta." },
    { "tableName": "league_participants", "description": "Associazione utenti a leghe. Traccia `current_budget`, `locked_credits`, etc." },
    { "tableName": "auctions", "description": "Asta per un singolo giocatore." },
    { "tableName": "bids", "description": "Log di ogni offerta." },
    { "tableName": "player_assignments", "description": "Traccia l'assegnazione finale di un giocatore a un manager." },
    { "tableName": "budget_transactions", "description": "Log delle modifiche al `current_budget`." },
    { "tableName": "user_league_compliance_status", "description": "Traccia lo stato di conformità dell'utente ai requisiti di rosa per lega/fase." }
  ],
  "leagueAndParticipantManagement": {
    "feature_name": "Gestione Leghe e Partecipanti (Admin)",
    "summary": "Fornisce all'admin una suite di strumenti per creare leghe, visualizzarle in una lista e gestire i partecipanti (aggiunta, modifica nome squadra, rimozione) e lo stato operativo di ogni lega dalla sua dashboard dedicata.",
    "architectural_pattern": "Pagine Server Components per il data fetching diretto e la visualizzazione. Le operazioni di modifica (mutations) sono gestite da componenti Client dedicati (forms, dialogs) che invocano Server Actions per interagire con il backend in modo sicuro.",
    "user_flow": [
      "1. **Creazione:** L'admin usa il form in `/admin/leagues/create` per creare una nuova lega.",
      "2. **Visualizzazione:** L'admin vede tutte le leghe create nella pagina `/admin/leagues`.",
      "3. **Gestione:** Cliccando su una lega, accede alla sua dashboard (`/admin/leagues/[id]/dashboard`).",
      "4. **Aggiunta Partecipante:** Dalla dashboard, l'admin può aggiungere nuovi manager.",
      "5. **Modifica Nome Squadra:** L'admin può modificare il nome di una squadra in qualsiasi momento tramite un popover.",
      "6. **Rimozione Partecipante:** L'admin può rimuovere un partecipante tramite un dialogo di conferma, ma solo se la lega è in stato 'participants_joining'.",
      "7. **Cambio Stato:** L'admin può cambiare la fase operativa della lega (es. da 'Iscrizioni Aperte' a 'Asta Attiva')."
    ]
  },
  "realTimeNotificationSystem": {
    "feature_name": "Sistema di Notifiche e Aggiornamenti in Tempo Reale",
    "summary": "Implementa un sistema basato su WebSocket (Socket.IO) per fornire aggiornamenti della UI in tempo reale e notifiche personali.",
    "architectural_pattern": "Pattern a 'Server Dedicato Stateful'. Un server Socket.IO (`socket-server.ts`) gira come processo separato. Il backend Next.js comunica con esso tramite un 'ponte HTTP'."
  },
  "auctionLogic": {
    "penaltySystem": {
      "trigger": "Al login/accesso sezioni chiave asta (approccio 'lazy').",
      "requirement": "Entro 1 ora dal trigger, N-1 slot coperti per ruoli attivi.",
      "penaltyApplication": "5 crediti se non conforme dopo 1 ora, con notifica real-time all'utente."
    }
  },
  "adminFunctionalitiesImplemented": [
    "Gestione Utenti (visualizzazione e cambio ruolo).",
    "Creazione di nuove leghe.",
    "Visualizzazione lista leghe.",
    "Dashboard di gestione lega con controlli per: aggiungere/rimuovere partecipanti, modificare nomi squadra e cambiare lo stato della lega."
  ],
  "managerFunctionalitiesImplemented_Backend": [
    "Offerte (iniziali, successive) con gestione `locked_credits`.",
    "Visualizzazione stato asta giocatore.",
    "Visualizzazione propria cronologia transazioni budget.",
    "Visualizzazione propria rosa.",
    "Trigger (implicito) del controllo di compliance per penalità.",
    "Ricezione aggiornamenti asta e notifiche (offerte superate, penalità) in tempo reale."
  ],
  "managerFunctionalitiesImplemented_Frontend": [
    "Interfaccia aste live responsive con visualizzazione giocatore e timer real-time.",
    "Sistema di offerte con validazione budget e offerte rapide (+1, +5, +10).",
    "Monitoraggio budget in tempo reale con progress bar e avvisi.",
    "Cronologia offerte con evidenziazione utente corrente.",
    "Notifiche toast per offerte superate e aste concluse.",
    "Layout responsive (desktop: 2 colonne, mobile: singola colonna).",
    "Integrazione Socket.IO per aggiornamenti live dell'interfaccia.",
    "Interfaccia ricerca giocatori con filtri avanzati (ruolo, stato asta, tempo rimanente, squadra).",
    "Ricerca testuale per nome giocatore e squadra con risultati real-time.",
    "Cards giocatori con stats complete (Qt.A, Qt.I, FVM, Diff) e stato asta.",
    "Modal offerte rapide direttamente dalla ricerca con validazione budget.",
    "Countdown timer per aste in scadenza con aggiornamenti real-time.",
    "Funzionalità admin per avviare nuove aste direttamente dall'interfaccia giocatori."
  ],
  "autoBidSystem": {
    "feature_name": "Sistema Auto-Bid con Logica eBay",
    "summary": "Sistema di offerte automatiche che segue la logica di proxy bidding di eBay con priorità temporale e counter-bid intelligente.",
    "core_logic": [
      "Auto-bid si attiva quando qualcuno fa offerta superiore a quella corrente.",
      "Counter-bid automatico a (offerta_avversaria + 1) se auto-bid può coprire.",
      "Priorità temporale: auto-bid più vecchia vince in caso di importi uguali.",
      "Auto-bid vs auto-bid: vincitore paga (secondo_max + 1) fino al proprio limite.",
      "Privacy: solo il proprietario vede la propria auto-bid.",
      "Notifiche real-time per attivazioni e superamenti."
    ],
    "components": [
      "src/components/auction/AutoBidModal.tsx - Modal per impostare auto-bid",
      "src/components/players/QuickBidModal.tsx - Quick bid con auto-bid integrata",
      "src/app/api/leagues/[league-id]/players/[player-id]/auto-bid/route.ts - API gestione auto-bid",
      "src/lib/db/services/bid.service.ts - Logica eBay per attivazione auto-bid"
    ]
  },
  "expiredAuctionsSystem": {
    "feature_name": "Processamento Automatico Aste Scadute",
    "summary": "Sistema che previene offerte su aste scadute e processa automaticamente le assegnazioni.",
    "core_logic": [
      "Validazione scadenza in tutte le API di bidding.",
      "Processamento automatico ogni 30 secondi nelle pagine auctions e players.",
      "Endpoint dedicato /process-expired-auctions per elaborazione.",
      "Assegnazione automatica al miglior offerente quando timer scade.",
      "Aggiornamento real-time dell'UI dopo processamento."
    ]
  },
  "socketIOEnhancements": {
    "feature_name": "Miglioramenti Sistema Socket.IO",
    "summary": "Ottimizzazioni per notifiche real-time e avvio automatico del socket server.",
    "improvements": [
      "Socket server avviato automaticamente con 'pnpm run dev' usando concurrently.",
      "Correzione nomi stanze Socket.IO (league-1 invece di league-league-1).",
      "Notifiche specifiche per auto-bid attivate e offerte superate.",
      "Debug logs per troubleshooting eventi Socket.IO.",
      "Gestione corretta cleanup intervalli nelle pagine."
    ]
  },
  "uiImprovements": {
    "feature_name": "Miglioramenti Interfaccia Utente",
    "summary": "Standardizzazione colori, icone e correzioni visual consistency.",
    "improvements": [
      "Colori ruoli standardizzati: P=giallo, D=verde, C=blu, A=rosso.",
      "Icona lucchetto per giocatori assegnati invece di ruolo+prezzo.",
      "Visualizzazione auto-bid solo al proprietario (privacy).",
      "Correzione duplicazioni nei menu a tendina squadre.",
      "Database pulito: rimossi duplicati giocatori e standardizzati nomi squadre."
    ]
  },
  "databaseCleanup": {
    "feature_name": "Pulizia Database e Standardizzazione",
    "summary": "Rimozione duplicati e standardizzazione nomi squadre per consistenza dati.",
    "actions_performed": [
      "Rimossi giocatori duplicati (es. MAIGNAN/MIL vs Maignan/Milan).",
      "Standardizzati nomi squadre a versioni complete (Milan invece di MIL).",
      "560 giocatori totali dopo pulizia (vs ~570 con duplicati).",
      "20 squadre uniche con nomi completi standardizzati.",
      "Eliminazione confusione nei menu a tendina e filtri."
    ]
  }
}
